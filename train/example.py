#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
—Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è–º–∏ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π bounding boxes.
"""

import os
import random
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import torch
from train.dataset import AppleDataset
from train.normalization_utils import get_transform

def denormalize_image(tensor, mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]):
    """
    –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    
    Args:
        tensor: –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–Ω–∑–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (C, H, W)
        mean: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        std: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–ª—è –¥–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    
    Returns:
        numpy.ndarray: –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (H, W, C)
    """
    # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ç–µ–Ω–∑–æ—Ä —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
    img = tensor.clone()
    
    # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    for t, m, s in zip(img, mean, std):
        t.mul_(s).add_(m)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º [0, 1]
    img = torch.clamp(img, 0, 1)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –∏ –º–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    img = img.permute(1, 2, 0).numpy()
    
    return img

def visualize_sample(data_path, annotations_file, use_augmentations=True, sample_index=None):
    """
    –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å bounding boxes.
    
    Args:
        data_path (str): –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        annotations_file (str): –ò–º—è —Ñ–∞–π–ª–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π COCO
        use_augmentations (bool): –ü—Ä–∏–º–µ–Ω—è—Ç—å –ª–∏ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
        sample_index (int, optional): –ò–Ω–¥–µ–∫—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ None, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ)
    """
    
    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if use_augmentations:
        transforms = get_transform(
            train=True, 
            augmentation_prob=0.6,  # –í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            normalize=True
        )
        title_suffix = "—Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è–º–∏"
    else:
        transforms = get_transform(
            train=False,  # –ë–µ–∑ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π
            normalize=True
        )
        title_suffix = "–±–µ–∑ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π"
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç
    dataset = AppleDataset(
        root_dir=data_path,
        annotations_path=os.path.join(data_path, annotations_file),
        transforms=transforms,
        is_train=use_augmentations,
        normalize=True
    )
    
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω –¥–∞—Ç–∞—Å–µ—Ç —Å {len(dataset)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π
    if sample_index is None:
        sample_index = random.randint(0, len(dataset) - 1)
    else:
        sample_index = min(sample_index, len(dataset) - 1)
    
    print(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ #{sample_index}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    image_tensor, target = dataset[sample_index]
    
    # –î–µ–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # image = denormalize_image(image_tensor)
    image = image_tensor.permute(1, 2, 0).numpy()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ bounding boxes
    boxes = target['boxes'].numpy() if len(target['boxes']) > 0 else []
    labels = target['labels'].numpy() if len(target['labels']) > 0 else []
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É
    fig, ax = plt.subplots(1, 1, figsize=(12, 10))
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    ax.imshow(image)
    ax.set_title(f'–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞ ({title_suffix})', fontsize=14, fontweight='bold')
    ax.axis('off')
    
    # –¶–≤–µ—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
    colors = {
        1: 'black',    # –ù–µ–∑—Ä–µ–ª–æ–µ —è–±–ª–æ–∫–æ
        2: 'white'        # –ó—Ä–µ–ª–æ–µ —è–±–ª–æ–∫–æ
    }
    
    class_names = {
        1: '–ù–µ–∑—Ä–µ–ª–æ–µ',
        2: '–ó—Ä–µ–ª–æ–µ'
    }
    
    # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    unripe_count = 0
    ripe_count = 0
    
    # –†–∏—Å—É–µ–º bounding boxes
    for box, label in zip(boxes, labels):
        x1, y1, x2, y2 = box
        width = x2 - x1
        height = y2 - y1
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        rect = patches.Rectangle(
            (x1, y1), width, height,
            linewidth=3,
            edgecolor=colors.get(label, 'white'),
            facecolor='none',
            linestyle='-' if label == 2 else '--'
        )
        ax.add_patch(rect)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É
        #class_name = class_names.get(label, f'Class {label}')
        #ax.text(
        #    x1, y1 - 5,
        #    class_name,
        #    color=colors.get(label, 'white'),
        #    fontsize=12,
        #    fontweight='bold',
        #    bbox=dict(boxstyle="round,pad=0.3", facecolor='black', alpha=0.7)
        #)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
        if label == 1:
            unripe_count += 1
        elif label == 2:
            ripe_count += 1
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    #total_count = unripe_count + ripe_count
    #stats_text = f"–ù–∞–π–¥–µ–Ω–æ: {unripe_count} –Ω–µ–∑—Ä–µ–ª—ã—Ö, {ripe_count} –∑—Ä–µ–ª—ã—Ö (–≤—Å–µ–≥–æ: {total_count})"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    #ax.text(
    #    0.02, 0.98, stats_text,
    #    transform=ax.transAxes,
    #    fontsize=12,
    #    verticalalignment='top',
    #    bbox=dict(boxstyle="round,pad=0.5", facecolor='white', alpha=0.8)
    #)
    
    # –°–æ–∑–¥–∞–µ–º –ª–µ–≥–µ–Ω–¥—É
    #legend_elements = []
    #for label, color in colors.items():
    #    legend_elements.append(
    #        patches.Patch(color=color, label=class_names[label])
    #    )
    
    #ax.legend(handles=legend_elements, loc='upper right', fontsize=12)
    
    plt.tight_layout()
    plt.show()
    
    # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:")
    print(f"–†–∞–∑–º–µ—Ä —Ç–µ–Ω–∑–æ—Ä–∞: {image_tensor.shape}")
    print(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image.shape}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(boxes)}")
    print(f"–ù–µ–∑—Ä–µ–ª—ã—Ö —è–±–ª–æ–∫: {unripe_count}")
    print(f"–ó—Ä–µ–ª—ã—Ö —è–±–ª–æ–∫: {ripe_count}")
    
    if len(boxes) > 0:
        print(f"\n–î–µ—Ç–∞–ª–∏ bounding boxes:")
        for i, (box, label) in enumerate(zip(boxes, labels)):
            x1, y1, x2, y2 = box
            print(f"  –û–±—ä–µ–∫—Ç {i+1}: {class_names.get(label, f'Class {label}')} "
                  f"[{x1:.1f}, {y1:.1f}, {x2:.1f}, {y2:.1f}] "
                  f"(—Ä–∞–∑–º–µ—Ä: {x2-x1:.1f}x{y2-y1:.1f})")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    data_path = '../data/train'  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    annotations_file = '_annotations.coco.json'  # –§–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
    
    print("=" * 60)
    print("–ü–†–û–°–¢–û–ô –ü–†–û–°–ú–û–¢–†–©–ò–ö –î–ê–¢–ê–°–ï–¢–ê –Ø–ë–õ–û–ö")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(data_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
        return
    
    annotations_path = os.path.join(data_path, annotations_file)
    if not os.path.exists(annotations_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π {annotations_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        random.seed(42)
        torch.manual_seed(42)
        np.random.seed(42)
        
        print("üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –° –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è–º–∏...")
        visualize_sample(data_path, annotations_file, use_augmentations=True)
        
        input("\nüëÜ –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π...")
        
        # –°–±—Ä–æ—Å seed –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≥–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        random.seed(42)
        torch.manual_seed(42)
        np.random.seed(42)
        
        print("üéØ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ –∂–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ë–ï–ó –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π...")
        visualize_sample(data_path, annotations_file, use_augmentations=False)
        
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º")
        print("2. –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π")
        print("3. –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (dataset.py, train/normalization_utils.py)")

if __name__ == "__main__":
    main()